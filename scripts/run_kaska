#!/bin/env python
import argparse
import datetime as dt
import yaml

from kaska.entry import run_process

# Default values of optional parameters
default_block_size = 256
default_disable_debug_log = False # We output debug log by default

# Set optional parameters to default values in case not set later
# block_size = default_block_size
debug = not default_disable_debug_log

# List of missing required values
missing = []

def str2date(string):
    return dt.datetime.strptime(string, '%Y%m%d')


def check_value(param, dict):
    #print("DEBUGGING: " + param)
    #print(dict.values())
    #key = "'" + param + "'"
    if param in dict:
        value = dict[param]
        #print("value = " + str(value))
        if (value != None) and (value != ""):
            #print("DEBUG: " + param + "=" + str(value))
            return value
        else:
            if (param == "block_size"):
                return default_block_size
            else:    
                missing.append(param)
    else:
        if (param == "block_size"):
            return default_block_size
        else:    
            missing.append(param)



def parse_file(filename):
    with open(filename) as stream:
        try:
            config = yaml.safe_load(stream)
            print(config)
            if "disable_debug_log" in config:
                print("Debug log output disabled.")
            else:
                print("Debug log output enabled.")
            
            # The following parameters are all required:
            start_date = str2date(str(check_value("start_date", config)))
            end_date = str2date(str(check_value("end_date", config)))
            temporal_grid_space = check_value("temporal_grid_space", config)
            parent_folder = check_value("parent_folder", config)
            state_mask = check_value("state_mask", config)
            output_folder = check_value("output_folder", config) 

            # Special case - optional parameters
            block_size = check_value("block_size", config)
            config["block_size"] = block_size

            # NB we also need to deal with optional args which MIGHT be in the config file.
            # debug, block_size

            if len(missing) > 0:
                print("ERROR: The following required parameter(s) need to be set in the config file:")
                print(missing)
                exit()

            if (debug):
                print("Debug log output is ON")
                print("Using config file: " + str(filename))
                print("start_date=" + str(start_date))
                print("end_date=" + str(end_date))
                print("temporal_grid_space=" + str(temporal_grid_space))
                print("parent_folder=" + str(parent_folder))
                print("state_mask=" + str(state_mask))
                print("output_folder=" + str(output_folder))
                print("block_size=" + str(block_size))

            return config 

        except yaml.YAMLError as exc:
            print(exc)


# Define and parse user arguments
arg_parser = argparse.ArgumentParser(description='Run the KaSKA analysis '
                                     'for given time grid, data, and state mask.')

arg_parser.add_argument('--config_file',
                        help="The YAML-format config file you are using (instead of command-line args)"
                        + " ** NB ** Values in the file will override any command-line values.")
arg_parser.add_argument('start_date', type=str2date,
                        help='The start date in the format YYYYMMDD , eg. 20170501 for 1st May 2017.')
arg_parser.add_argument('end_date', type=str2date,
                        help='The end date in the format YYYYMMDD , eg. 20170501 for 1st May 2017.')
arg_parser.add_argument('temporal_grid_space', type=int,
                        help='The spacing of the time grid, in days.')
arg_parser.add_argument('parent_folder',
                        help='The full path to the folder containing the data. See README for the expected folder tree structure.')
arg_parser.add_argument('state_mask',
                        help='The full path of the tif file containing the state mask.')
arg_parser.add_argument('output_folder',
                        help="The full path of the output folder.")
arg_parser.add_argument('--disable_debug_log', action='store_true', default=default_disable_debug_log,
                        help='Disable the debug-level logging, leaving only info-level logging on. By default, logging reports debug messages as well.')
arg_parser.add_argument('--block_size', default=default_block_size, type=int,
                        help='The size of the side of the square tile to break the image into. Default is ' + str(default_block_size) + '.')
args = arg_parser.parse_args()

#if (args.config_file and (len(args) > 1)):
#      print("ERROR: use EITHER a config file OR command-line arguments")
#      exit()


#print(args.start_date, args.end_date, args.temporal_grid_space, args.parent_folder, args.state_mask, args.output_folder, args.disable_debug_log, args.block_size)

# Call function that runs the KaSKA process
debug = not args.disable_debug_log

if (args.config_file):
    mydict = parse_file(args.config_file)
    #parse_file_and_run(args.config_file)

    run_process(mydict["start_date"], mydict["end_date"], mydict["temporal_grid_space"],
        mydict["parent_folder"], mydict["state_mask"], mydict["output_folder"], debug=debug, 
        #block_size=[int(mydict["block_size"]), int(mydict["block_size"])])
        block_size=[999,999])
else:
    # print("DEBUG:")
    # print("args.start_date=" + str(args.start_date))
    # print("args.end_date=" + str(args.end_date))
    # print("args.temporal_grid_space=" + str(args.temporal_grid_space))
    # print("args.parent_folder=" + str(args.parent_folder))
    # print("args.state_mask=" + str(args.state_mask))
    # print("args.output_folder=" + str(args.output_folder))
    # print("debug=" + str(debug))
    # print("args.block_size=" + str(args.block_size))
    # exit()    

    run_process(args.start_date, args.end_date, args.temporal_grid_space,
            args.parent_folder, args.state_mask, args.output_folder,
            debug=debug, block_size=[args.block_size, args.block_size])
