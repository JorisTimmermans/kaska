#!/bin/env python

# Usage:
# python run_kaska --config_file=<file> [--disable_debug_log] | --help
# <file> must be a YAML file, similar to config.yaml

import argparse
import datetime as dt
import yaml

from kaska.entry import run_process

# Default values of optional parameters
default_block_size = 256
#default_disable_debug_log = False # We output debug log by default

# Set optional parameters to default values in case not set later
# block_size = default_block_size
debug = True

# List of missing required values
missing = []

def str2date(string):
    return dt.datetime.strptime(string, '%Y%m%d')


def check_value(param, dict):
    #print("DEBUGGING: " + param)
    #print(dict.values())
    if param in dict:
        value = dict[param]
        #print("value = " + str(value))
        if (value != None) and (value != ""):
            #print("DEBUG: " + param + "=" + str(value))
            return value
        else:
            if (param == "block_size"):
                return default_block_size
            else:    
                missing.append(param)
    else:
        if (param == "block_size"):
            return default_block_size
        else:    
            missing.append(param)



def parse_file(filename):
    with open(filename) as stream:
        try:
            config = yaml.safe_load(stream)
            print(config)
            #if "disable_debug_log" in config:
            global debug
            if not debug:
                print("Debug log output disabled.")
                debug = False
            else:
                print("Debug log output enabled.")
                debug = True
            
            # The following parameters are all required:
            start_date = str2date(str(check_value("start_date", config)))
            end_date = str2date(str(check_value("end_date", config)))
            temporal_grid_space = check_value("temporal_grid_space", config)
            parent_folder = check_value("parent_folder", config)
            state_mask = check_value("state_mask", config)
            output_folder = check_value("output_folder", config) 

            # Special case - optional parameter
            block_size = check_value("block_size", config)
            config["block_size"] = block_size

            if len(missing) > 0:
                print("ERROR: The following required parameter(s) need to be set in the config file:")
                print(missing)
                exit()

            if (debug):
                print("Debug log output is ON")
                print("Using config file: " + str(filename))
                print("start_date=" + str(start_date))
                print("end_date=" + str(end_date))
                print("temporal_grid_space=" + str(temporal_grid_space))
                print("parent_folder=" + str(parent_folder))
                print("state_mask=" + str(state_mask))
                print("output_folder=" + str(output_folder))
                print("block_size=" + str(block_size))

            return config 

        except yaml.YAMLError as exc:
            print(exc)


# Define and parse user arguments
parser = argparse.ArgumentParser(description='Run the KaSKA analysis '
                                     'for given time grid, data, and state mask.')

parser.add_argument('--config_file',
                    help="The YAML-format config file you are using (instead of command-line args)")
                    #+ " ** NB ** Values in the file will override any command-line values.")
parser.add_argument('--disable_debug_log', action='store_true', default=False,
                    help='Disable the debug-level logging, leaving only info-level logging on. By default, logging reports debug messages as well.')
     
args = parser.parse_args()

if (args.disable_debug_log):
    debug = False

# Config file present, with or without --disable_debug_log option
if (args.config_file):
    mydict = parse_file(args.config_file)
    
    run_process(mydict["start_date"], mydict["end_date"], mydict["temporal_grid_space"],
        mydict["parent_folder"], mydict["state_mask"], mydict["output_folder"], debug=debug, 
        #block_size=[int(mydict["block_size"]), int(mydict["block_size"])])
        block_size=[999,999])

   
# No config file present
else:
    print ("Please specify a config file with --config_file option.")

