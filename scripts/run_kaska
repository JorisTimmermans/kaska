#!/bin/env python
import logging
import argparse
import datetime as dt

from kaska.inference_runner import kaska_runner
from kaska.inverters import get_emulator, get_inverter


def str2date(string):
    return dt.datetime.strptime(string, '%Y%m%d')


# Define and parse user arguments
arg_parser = argparse.ArgumentParser(description='Run the KaSKA analysis '
                                     'for given time grid, data, and state mask.')

arg_parser.add_argument('start_date', type=str2date,
                        help='The start date in the format YYYYMMDD , eg. 20170501 for 1st May 2017.')
arg_parser.add_argument('end_date', type=str2date,
                        help='The end date in the format YYYYMMDD , eg. 20170501 for 1st May 2017.')
arg_parser.add_argument('temporal_grid_space', type=int,
                        help='The spacing of the time grid, in days.')

arg_parser.add_argument('parent_folder',
                        help='The full path to the folder containing the data. See README for the expected folder tree structure.')
arg_parser.add_argument('state_mask',
                        help='The full path of the tif file containing the state mask.')
arg_parser.add_argument('output_folder',
                        help="The full path of the output folder")

arg_parser.add_argument('-loglevel', default='debug',
                        help='Output level for the logger. Options are debug, info, warning, error. Default is debug.')
arg_parser.add_argument('-block_size', default=256, type=int,
                        help='The size of the side of the square tile to break the image into. Default is 256.')
args = arg_parser.parse_args()
#print(args.start_date, args.end_date, args.temporal_grid_space, args.parent_folder, args.state_mask, args.output_folder, args.loglevel, args.logfile, args.block_size)

# Setup logger
loglevels = { 'debug':logging.DEBUG,
              'info':logging.INFO,
              'warning':logging.WARNING,
              'error':logging.ERROR }
LOG = logging.getLogger("KaSKA")
LOG.setLevel(loglevels[args.loglevel])
if not LOG.handlers:
    ch = logging.StreamHandler()
    ch.setLevel(loglevels[args.loglevel])
    formatter = logging.Formatter('%(asctime)s - %(name)s - ' +
                                  '%(levelname)s - %(message)s')
    ch.setFormatter(formatter)
    LOG.addHandler(ch)
LOG.propagate = False
LOG.info("Running KaSKA...")

#start_date = dt.datetime(2017, 5, 1)
#end_date = dt.datetime(2017, 9, 1)
#temporal_grid_space = 5
#parent_folder = "/home/ucfajlg/Data/python/KaFKA_Validation/LMU/s2_obs/"
#state_mask = "/home/ucfajlg/Data/python/KaFKA_Validation/LMU/carto/ESU.tif"

# Prepare arguments needed to run main kaska executable
s2_emulator = get_emulator("prosail", "Sentinel2")
approx_inverter = get_inverter("prosail_5paras", "Sentinel2")

kaska_runner(args.start_date, args.end_date, args.temporal_grid_space, args.state_mask,
             args.parent_folder, approx_inverter, s2_emulator, args.output_folder,
             block_size=[args.block_size, args.block_size])
